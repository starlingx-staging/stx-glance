From 47041a9b7dae6329043f78edb73d6f69a087847c Mon Sep 17 00:00:00 2001
From: Ovidiu Poncea <ovidiu.poncea@windriver.com>
Date: Mon, 12 Sep 2016 15:11:31 +0300
Subject: [PATCH 06/21] Pike Rebase: Add graceful shutdown for api and registry

RAW Caching exists the last and does not need any soft shutdown
procedure as it already supports safe restarts.

Graceful termination of wsgi worker & child worker processes

Ensure that glance wsgi worker processes terminate when their parent
dies unexpectedly and that glance wsgi child worker processes do not
hang during graceful termination.

This will register the child processes to detect a parent pipe has been
broken and basically ports in the same code that exists in oslo_service
for how the child worker processes detect their parent has terminated
unexpectedly

Wait up to one second before doing a hard exit of a child wsgi worker
process. When doing a graceful and clean shutdown the process could hang
on the eventlet pool. This code waits up to a second and then does an
instantaneous shutdown. glance-api seemed to encounter this hang more
frequently than most processes.

(cherry picked from commit ca167163e5b9d87ae374a3ed3b600f2272e56792)
Signed-off-by: Robert Church <robert.church@windriver.com>
---
 etc/glance-api.conf        |  3 ++
 etc/glance-registry.conf   |  3 ++
 glance/cache_raw.py        |  6 ++--
 glance/common/exception.py |  4 +++
 glance/common/wsgi.py      | 85 ++++++++++++++++++++++++++++++++++++++++++++--
 5 files changed, 96 insertions(+), 5 deletions(-)

diff --git a/etc/glance-api.conf b/etc/glance-api.conf
index 9cf5338..a820802 100644
--- a/etc/glance-api.conf
+++ b/etc/glance-api.conf
@@ -4,6 +4,9 @@
 # From glance.api
 #
 
+# WRS: Enable graceful shutdown
+# graceful_shutdown = False
+
 #
 # Set the image owner to tenant or the authenticated user.
 #
diff --git a/etc/glance-registry.conf b/etc/glance-registry.conf
index de21d51..b22ca71 100644
--- a/etc/glance-registry.conf
+++ b/etc/glance-registry.conf
@@ -4,6 +4,9 @@
 # From glance.registry
 #
 
+# WRS: Enable graceful shutdown
+# graceful_shutdown = False
+
 #
 # Set the image owner to tenant or the authenticated user.
 #
diff --git a/glance/cache_raw.py b/glance/cache_raw.py
index e3ef1f2..3474968 100644
--- a/glance/cache_raw.py
+++ b/glance/cache_raw.py
@@ -29,7 +29,6 @@ from oslo_concurrency import processutils
 from oslo_utils import encodeutils
 from oslo_utils import timeutils
 from oslo_utils import units
-import signal
 
 try:
     import rados
@@ -41,6 +40,7 @@ except ImportError:
 import errno
 import os
 import shutil
+import signal
 import stat
 import sys
 import time
@@ -576,11 +576,11 @@ def start_raw_caching(server):
     if _RBD_STORE not in CONF.glance_store.stores:
         LOG.info(_LI("Not using %s. RAW caching is only "
                      "available for Ceph RBD") % _RBD_STORE)
-        return
+        return None
     if not CONF.cache_raw_conversion_dir:
         LOG.error(_LE("Option cache_raw_conversion_dir is not defined."
                       "Caching of images to RAW is disabled!"))
-        return
+        return None
 
     # Start the new process early, we want to avoid crashing glance if
     # something bad happens when initializing RAW caching
diff --git a/glance/common/exception.py b/glance/common/exception.py
index 8b9ab32..778bd82 100644
--- a/glance/common/exception.py
+++ b/glance/common/exception.py
@@ -322,6 +322,10 @@ class SIGHUPInterrupt(GlanceException):
     message = _("System SIGHUP signal received.")
 
 
+class SIGUSR1Interrupt(GlanceException):
+    message = _("System SIGUSR1 signal received.")
+
+
 class RPCError(GlanceException):
     message = _("%(cls)s exception was raised in the last rpc call: %(val)s")
 
diff --git a/glance/common/wsgi.py b/glance/common/wsgi.py
index ebe13e8..f2aa6fd 100644
--- a/glance/common/wsgi.py
+++ b/glance/common/wsgi.py
@@ -24,6 +24,7 @@ from __future__ import print_function
 import errno
 import functools
 import os
+import psutil
 import signal
 import sys
 import time
@@ -308,6 +309,10 @@ wsgi_opts = [
                       '"HTTP_X_FORWARDED_PROTO".')),
 ]
 
+wrs_options = [
+    cfg.BoolOpt("graceful_shutdown", default=False,
+                help=_('Enable graceful shutdown through SIGUSR1.')),
+]
 
 LOG = logging.getLogger(__name__)
 
@@ -316,6 +321,7 @@ CONF.register_opts(bind_opts)
 CONF.register_opts(socket_opts)
 CONF.register_opts(eventlet_opts)
 CONF.register_opts(wsgi_opts)
+CONF.register_opts(wrs_options)
 profiler_opts.set_defaults(CONF)
 
 ASYNC_EVENTLET_THREAD_POOL_LIST = []
@@ -458,9 +464,10 @@ class Server(object):
         self._logger = logging.getLogger("eventlet.wsgi.server")
         self.threads = threads
         self.children = set()
-        self.raw_caching_pid = None
         self.stale_children = set()
         self.running = True
+        self._exit = False  # WRS: Implement graceful process exit
+        self.raw_caching_pid = None  # WRS: WSGI thinks it's alone
         # NOTE(abhishek): Allows us to only re-initialize glance_store when
         # the API's configuration reloads.
         self.initialize_glance_store = initialize_glance_store
@@ -495,6 +502,12 @@ class Server(object):
         self.running = False
         os.killpg(self.pgid, signal.SIGTERM)
 
+    def disable_children(self, *args):
+        """Disable processes and wait for them to complete."""
+        signal.signal(signal.SIGUSR1, signal.SIG_IGN)
+        self._exit = True
+        raise exception.SIGUSR1Interrupt
+
     def start(self, application, default_port):
         """
         Run a WSGI server with the given application.
@@ -519,6 +532,13 @@ class Server(object):
             signal.signal(signal.SIGTERM, self.kill_children)
             signal.signal(signal.SIGINT, self.kill_children)
             signal.signal(signal.SIGHUP, self.hup)
+
+            # Adding this to detect if a parent dies abruptly
+            rfd, self.writepipe = os.pipe()
+            self.readpipe = eventlet.greenio.GreenPipe(rfd, 'r')
+
+            if CONF.graceful_shutdown:
+                signal.signal(signal.SIGUSR1, self.disable_children)
             while len(self.children) < workers:
                 self.run_child()
 
@@ -559,10 +579,26 @@ class Server(object):
     def wait_on_children(self):
         while self.running:
             try:
+                # WRS: Implement graceful process exit
+                if CONF.graceful_shutdown and self._exit:
+                    # Wait for children to exit and break
+                    parent = psutil.Process()
+                    children = parent.children()
+                    if self.raw_caching_pid and len(children) == 1:
+                        # RAW Caching need special treatment
+                        if children[0].pid == self.raw_caching_pid:
+                            os.kill(self.raw_caching_pid, signal.SIGTERM)
+                            break
+                    elif not len(children):
+                        LOG.info(_LI("All children have exited, "
+                                     "closing Glance"))
+                        break
+
                 pid, status = os.wait()
                 if os.WIFEXITED(status) or os.WIFSIGNALED(status):
                     self._remove_children(pid)
-                    self._verify_and_respawn_children(pid, status)
+                    if not self._exit:
+                        self._verify_and_respawn_children(pid, status)
             except OSError as err:
                 if err.errno not in (errno.EINTR, errno.ECHILD):
                     raise
@@ -572,6 +608,9 @@ class Server(object):
             except exception.SIGHUPInterrupt:
                 self.reload()
                 continue
+            except exception.SIGUSR1Interrupt:
+                self.unload()
+                continue
         eventlet.greenio.shutdown_safe(self.sock)
         self.sock.close()
         LOG.debug('Exited')
@@ -621,6 +660,18 @@ class Server(object):
         self.configure(old_conf, has_changed)
         self.start_wsgi()
 
+    def unload(self):
+        """
+        Finish existing processes and exist
+
+        Existing child processes are sent a SIGHUP signal
+        and will exit after completing existing requests.
+        """
+        try:
+            os.killpg(self.pgid, signal.SIGHUP)
+        except exception.SIGHUPInterrupt:
+            pass
+
     def wait(self, raw_caching_pid=None):
         """Wait until all servers have completed running."""
         if raw_caching_pid:
@@ -637,6 +688,8 @@ class Server(object):
         def child_hup(*args):
             """Shuts down child processes, existing requests are handled."""
             signal.signal(signal.SIGHUP, signal.SIG_IGN)
+            if CONF.graceful_shutdown:
+                signal.signal(signal.SIGUSR1, signal.SIG_IGN)
             eventlet.wsgi.is_accepting = False
             self.sock.close()
 
@@ -644,6 +697,8 @@ class Server(object):
         if pid == 0:
             signal.signal(signal.SIGHUP, child_hup)
             signal.signal(signal.SIGTERM, signal.SIG_DFL)
+            if CONF.graceful_shutdown:
+                signal.signal(signal.SIGUSR1, child_hup)
             # ignore the interrupt signal to avoid a race whereby
             # a child worker receives the signal before the parent
             # and is respawned unnecessarily as a result
@@ -661,6 +716,26 @@ class Server(object):
             LOG.info(_LI('Started child %s'), pid)
             self.children.add(pid)
 
+    def _pipe_watcher(self):
+        def _on_timeout_exit(*args):
+            LOG.info(_LI('Graceful shutdown timeout exceeded, '
+                         'instantaneous exiting'))
+            os._exit(1)
+
+        # This will block until the write end is closed when the parent
+        # dies unexpectedly
+
+        self.readpipe.read(1)
+        LOG.info(_LI('Parent process has died unexpectedly, exiting'))
+
+        # allow up to 1 second for sys.exit to gracefully shutdown
+        signal.signal(signal.SIGALRM, _on_timeout_exit)
+        signal.alarm(1)
+        # do the same cleanup as child_hup
+        eventlet.wsgi.is_accepting = False
+        self.sock.close()
+        sys.exit(1)
+
     def run_server(self):
         """Run a WSGI server."""
         if cfg.CONF.pydev_worker_debug_host:
@@ -669,6 +744,12 @@ class Server(object):
 
         eventlet.wsgi.HttpProtocol.default_request_version = "HTTP/1.0"
         self.pool = self.create_pool()
+
+        # Close write to ensure only parent has it open
+        os.close(self.writepipe)
+        # Create greenthread to watch for parent to close pipe
+        eventlet.spawn_n(self._pipe_watcher)
+
         try:
             eventlet.wsgi.server(self.sock,
                                  self.application,
-- 
2.7.4

