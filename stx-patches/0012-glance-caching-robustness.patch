From d164570e8df0fc4c2fa2cf93392ca79a06b529ad Mon Sep 17 00:00:00 2001
From: Stefan Dinescu <stefan.dinescu@windriver.com>
Date: Wed, 29 Nov 2017 17:11:57 +0000
Subject: [PATCH 12/21] glance caching robustness

Changes made:
- while in cached mode, users cannot delete or
  create images from the secondary region/cloud
- add a functionality to the glance-cache-prune command
  to delete images that have been cached, but are not
  longer present in the primary region/cloud
---
 glance/api/v2/images.py               |  4 +++
 glance/common/exception.py            |  5 ++++
 glance/image_cache/__init__.py        | 56 +++++++++++++++++++++++++++++++++++
 glance/location.py                    |  6 ++++
 glance/tests/unit/test_image_cache.py | 14 +++++++--
 5 files changed, 83 insertions(+), 2 deletions(-)

diff --git a/glance/api/v2/images.py b/glance/api/v2/images.py
index e7de059..029d3a9 100644
--- a/glance/api/v2/images.py
+++ b/glance/api/v2/images.py
@@ -87,6 +87,8 @@ class ImagesController(object):
             raise webob.exc.HTTPConflict(explanation=e.msg)
         except exception.NotAuthenticated as e:
             raise webob.exc.HTTPUnauthorized(explanation=e.msg)
+        except exception.ImageOperationNotPermitted as e:
+            raise webob.exc.HTTPBadRequest(explanation=e.msg)
         except TypeError as e:
             LOG.debug(encodeutils.exception_to_unicode(e))
             raise webob.exc.HTTPBadRequest(explanation=e)
@@ -382,6 +384,8 @@ class ImagesController(object):
             raise webob.exc.HTTPBadRequest(explanation=e.msg)
         except exception.NotAuthenticated as e:
             raise webob.exc.HTTPUnauthorized(explanation=e.msg)
+        except exception.ImageOperationNotPermitted as e:
+            raise webob.exc.HTTPBadRequest(explanation=e.msg)
 
     def _get_locations_op_pos(self, path_pos, max_pos, allow_max):
         if path_pos is None or max_pos is None:
diff --git a/glance/common/exception.py b/glance/common/exception.py
index 778bd82..6ea34c3 100644
--- a/glance/common/exception.py
+++ b/glance/common/exception.py
@@ -484,3 +484,8 @@ class InvalidDataMigrationScript(GlanceException):
     message = _("Invalid data migration script '%(script)s'. A valid data "
                 "migration script must implement functions 'has_migrations' "
                 "and 'migrate'.")
+
+
+class ImageOperationNotPermitted(GlanceException):
+    message = _("The %(operation)s operation not permitted when "
+                "glance caching is configured")
diff --git a/glance/image_cache/__init__.py b/glance/image_cache/__init__.py
index 31c33a9..ba9865e 100644
--- a/glance/image_cache/__init__.py
+++ b/glance/image_cache/__init__.py
@@ -26,10 +26,15 @@ from oslo_utils import excutils
 from oslo_utils import importutils
 from oslo_utils import units
 
+from glance.common import config
 from glance.common import exception
 from glance.common import utils
+from glance.context import RequestContext
+import glance.registry.client.v1.api as registry
 from glance.i18n import _, _LE, _LI, _LW
 
+from keystoneclient.v2_0 import client as keystoneclient
+
 LOG = logging.getLogger(__name__)
 
 image_cache_opts = [
@@ -276,7 +281,13 @@ class ImageCache(object):
         Removes all cached image files above the cache's maximum
         size. Returns a tuple containing the total number of cached
         files removed and the total size of all pruned image files.
+
+        WRS specific:
+        Also removes images that are cached, but the original image
+        in the primary region/cloud has since been deleted
         """
+        self.get_orphaned_cached_images()
+
         max_size = CONF.image_cache_max_size
         current_size = self.driver.get_cache_size()
         if max_size > current_size:
@@ -440,3 +451,48 @@ class ImageCache(object):
         into the queue.
         """
         return self.driver.get_queued_images()
+
+    def get_orphaned_cached_images(self):
+        """
+        WRS specific
+        In case glance-caching is used, returns a list of images that
+        were cached, but the original source image has since been deleted
+        """
+
+        admin_context = self._get_context()
+        registry.configure_registry_client()
+        active_images = registry.get_images_list(admin_context)
+        cached_images = self.get_cached_images()
+
+        for c_image in cached_images:
+            if not (any(image['id'] == c_image['image_id']
+                        for image in active_images)):
+                LOG.info(_LI("Image %s no longer present in the "
+                         "primary region. Deleting cached file.")
+                         % str(c_image['image_id']))
+                self.delete_cached_image(c_image['image_id'])
+            else:
+                LOG.debug("Image %s still present in the "
+                          "primary region."
+                          % str(c_image['image_id']))
+
+    def _get_context(self):
+        # (sdinescu)
+        # This is the only way I found for this to properly load the
+        # keystone parameters when loaded as a standalone app (by
+        # using the glance-pruner) and when being used as part of
+        # glance-api process chain
+        config.load_paste_app('glance-api')
+
+        k_cfg = CONF.keystone_authtoken
+        auth = keystoneclient.Client(
+            username=k_cfg.username,
+            password=k_cfg.password,
+            tenant_name=k_cfg.project_name,
+            auth_url=k_cfg.auth_uri + "/v2.0")
+        return RequestContext(
+            auth_token=auth.session.get_token(),
+            user=k_cfg.username,
+            tenant=k_cfg.project_name,
+            show_deleted=True,
+            overwrite=False)
diff --git a/glance/location.py b/glance/location.py
index cf8bbf4..d4884cb 100644
--- a/glance/location.py
+++ b/glance/location.py
@@ -153,6 +153,9 @@ class ImageFactoryProxy(glance.domain.proxy.ImageFactory):
                                                 proxy_kwargs=proxy_kwargs)
 
     def new_image(self, **kwargs):
+        # If glance cache is enabled, we don't allow users to create images
+        if CONF.remote_registry_region_name:
+            raise exception.ImageOperationNotPermitted(operation='create')
         locations = kwargs.get('locations', [])
         for loc in locations:
             _check_image_location(self.context,
@@ -404,6 +407,9 @@ class ImageProxy(glance.domain.proxy.Image):
             member_repo_proxy_kwargs=proxy_kwargs)
 
     def delete(self):
+        # If glance cache is enabled, we don't allow users to delete images
+        if CONF.remote_registry_region_name:
+            raise exception.ImageOperationNotPermitted(operation='delete')
         self.image.delete()
         if self.image.locations:
             for location in self.image.locations:
diff --git a/glance/tests/unit/test_image_cache.py b/glance/tests/unit/test_image_cache.py
index 89d86f5..6991dfc 100644
--- a/glance/tests/unit/test_image_cache.py
+++ b/glance/tests/unit/test_image_cache.py
@@ -16,6 +16,7 @@
 from contextlib import contextmanager
 import datetime
 import hashlib
+import mock
 import os
 import time
 
@@ -168,10 +169,15 @@ class ImageCacheTestCase(object):
         self.assertTrue(os.path.exists(incomplete_file_path_2))
 
     @skip_if_disabled
-    def test_prune(self):
+    @mock.patch.object(glance.image_cache.ImageCache,
+                       'get_orphaned_cached_images')
+    def test_prune(self,
+                   mock_cache_get_orphaned_images):
         """
         Test that pruning the cache works as expected...
         """
+
+        mock_cache_get_orphaned_images.return_values = None
         self.assertEqual(0, self.cache.get_cache_size())
 
         # Add a bunch of images to the cache. The max cache size for the cache
@@ -216,11 +222,15 @@ class ImageCacheTestCase(object):
         self.assertTrue(self.cache.is_cached(99), "Image 99 was not cached!")
 
     @skip_if_disabled
-    def test_prune_to_zero(self):
+    @mock.patch.object(glance.image_cache.ImageCache,
+                       'get_orphaned_cached_images')
+    def test_prune_to_zero(self,
+                           mock_cache_get_orphaned_images):
         """Test that an image_cache_max_size of 0 doesn't kill the pruner
 
         This is a test specifically for LP #1039854
         """
+        mock_cache_get_orphaned_images.return_value = None
         self.assertEqual(0, self.cache.get_cache_size())
 
         FIXTURE_FILE = six.BytesIO(FIXTURE_DATA)
-- 
2.7.4

